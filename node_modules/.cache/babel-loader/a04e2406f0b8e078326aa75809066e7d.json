{"ast":null,"code":"var _jsxFileName = \"/home/ken/unchain/ETH-NFT-game/nft-game-starter-project/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\nimport { ethers } from 'ethers'; // Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== '4') {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ユーザーがMetaMaskを持っているか確認します。\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!'); // 次の行でreturnを使用するため、ここでisLoadingを設定します。\n\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum); // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n\n        const accounts = await ethereum.request({\n          method: 'eth_accounts'\n        }); // もしアカウントが一つでも存在したら、以下を実行。\n\n        if (accounts.length !== 0) {\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log('Found an authorized account:', account); // currentAccountにユーザーのアカウントアドレスを格納\n\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 14\n      }, this);\n    } // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n\n\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://i.imgur.com/yMocj5x.png\",\n          alt: \"Pickachu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 3\n      }, this); // シナリオ2.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、\"SelectCharacter Component\" を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 10\n      }, this); // シナリオ3.\n      // ーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っている場合、\n      // Area でボスと戦います。\n    } else if (currentAccount && characterNFT) {\n      return /*#__PURE__*/_jsxDEV(Arena, {\n        characterNFT: characterNFT,\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 10\n      }, this);\n    }\n  }; // connectWallet メソッドを実装します。\n\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      checkIfWalletIsConnected(); // ウォレットアドレスに対してアクセスをリクエストしています。\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      }); // ウォレットアドレスを currentAccount に紐付けます。\n\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]); // ユーザーが Rinkeby に接続されているか確認します。\n\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      } // ユーザーが保持しているNFTの確認が完了したら、ロード状態を false に設定します。\n\n\n      setIsLoading(false);\n    }; // 接続されたウォレットがある場合のみ、下記を実行します。\n\n\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"\\u26A1\\uFE0F METAVERSE GAME \\u26A1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u3068\\u5354\\u529B\\u3057\\u3066\\u30DC\\u30B9\\u3092\\u5012\\u305D\\u3046\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }, this), renderContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"WfKwg0DIevkC/Lp/DKpo5wNTmQM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ken/unchain/ETH-NFT-game/nft-game-starter-project/src/App.js"],"names":["React","useEffect","useState","SelectCharacter","CONTRACT_ADDRESS","transformCharacterData","myEpicGame","Arena","LoadingIndicator","ethers","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","isLoading","setIsLoading","checkNetwork","window","ethereum","networkVersion","alert","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","renderContent","connectWalletAction","fetchNFTMetadata","provider","providers","Web3Provider","signer","getSigner","gameContract","Contract","abi","txn","checkIfUserHasNFT","name","twitterLogo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\n\nimport { ethers } from 'ethers';\n\n// Constantsを宣言する: constとは値書き換えを禁止した変数を宣言する方法です。\nconst TWITTER_HANDLE = 'あなたのTwitterハンドル';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  \n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== '4') {\n      alert(\"Rinkeby Test Network に接続してください!\")\n      } else {\n      console.log(\"Rinkeby に接続されています.\")\n      }\n    } catch(error) {\n      console.log(error)\n    }\n  }\n\n  // ユーザーがMetaMaskを持っているか確認します。\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n         // 次の行でreturnを使用するため、ここでisLoadingを設定します。\n         setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n        // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n        // もしアカウントが一つでも存在したら、以下を実行。\n        if (accounts.length !== 0) {\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          // currentAccountにユーザーのアカウントアドレスを格納\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n    // シナリオ1.\n\t// ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n\tif (!currentAccount) {\n\t\treturn (\n\t\t<div className=\"connect-wallet-container\">\n\t\t\t<img\n\t\t\t\tsrc=\"https://i.imgur.com/yMocj5x.png\"\n\t\t\t\talt=\"Pickachu\"\n\t\t\t/>\n\t\t\t<button\n\t\t\tclassName=\"cta-button connect-wallet-button\"\n\t\t\tonClick={connectWalletAction}\n\t\t\t>\n\t\t\tConnect Wallet to Get Started\n\t\t\t</button>\n\t\t</div>\n\t\t);\n\t// シナリオ2.\n\t// ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、\"SelectCharacter Component\" を表示します。\n\t} else if (currentAccount && !characterNFT) {\n\t\treturn <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n\t// シナリオ3.\n\t// ーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っている場合、\n\t// Area でボスと戦います。\n\t} else if (currentAccount && characterNFT) {\n\t\treturn <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\n\t}\n  };\n  // connectWallet メソッドを実装します。\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n      checkIfWalletIsConnected();\n      // ウォレットアドレスに対してアクセスをリクエストしています。\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n      // ウォレットアドレスを currentAccount に紐付けます。\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n      // ユーザーが Rinkeby に接続されているか確認します。\n    checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\n  useEffect(() => {\n    setIsLoading(true);\n      checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n  \n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n  \n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n      // ユーザーが保持しているNFTの確認が完了したら、ロード状態を false に設定します。\n    setIsLoading(false);\n    };\n  \n    // 接続されたウォレットがある場合のみ、下記を実行します。\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n\n  return (\n    <div className=\"App\">\n    <div className=\"container\">\n      <div className=\"header-container\">\n      \t<p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\n        <p className=\"sub-text\">プレイヤーと協力してボスを倒そう✨</p>\n        {/* renderContent メソッドを呼び出します。*/}\n        {renderContent()}\n      </div>\n      <div className=\"footer-container\">\n        <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n        <a\n          className=\"footer-text\"\n          href={TWITTER_LINK}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >{`built with @${TWITTER_HANDLE}`}</a>\n      </div>\n    </div>\n  </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}